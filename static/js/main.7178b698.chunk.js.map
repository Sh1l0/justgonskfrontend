{"version":3,"sources":["components/Card.js","components/List.js","components/Map.js","components/Menu.js","components/Gamburger.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","src","width","alt","title","date","description","Component","List","_this","set","cards","setState","state","list","xhr","XMLHttpRequest","open","setRequestHeader","send","onreadystatechange","readyState","status","JSON","parse","responseText","console","log","i","results","map","val","Card_Card","key","images","image","toUpperCase","dates","start_date","replace","alert","statusText","Map","Menu","click","e","target","parentNode","classList","remove","changeParentState","visible","nextProps","nextState","react_router_dom","onClick","to","react_router","path","exact","component","Gamburger","height","onChange","Header","Gamburger_Gamburger","Footer","href","App","stateToggle","isMenuVisible","Header_Header","Menu_Menu","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7178b698.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n\n        <div className=\"card paper\">\n          <img src={this.props.src} width='200' alt=\"\" className='image'/>\n          <div className=\"big\">{this.props.title || 'Загрузка...'}</div>\n          <div className=\"small\">{this.props.date}</div>\n          <div className=\"medium\">{this.props.description}</div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card';\n\nexport default class List extends Component {\n  constructor() {\n    super();\n    this.state = {};\n\n\n  /*  const options = {\n        method: 'GET',\n        //headers: new Headers({'Content-Type': 'application/json'}),\n        mode: 'no-cors'\n      };\n    fetch('https://justgonsk.azurewebsites.net/api/Test', options).then(response => {\n      return response.json();\n    }).then(val => {\n      list = val.results;\n      console.log(list);\n      let i = 0;\n      let cards = list.map((val) => {\n        return  <Card\n                  key={i++}\n                  src={val.images[0].image}\n                  title={val.title.toUpperCase()}\n                  date={val.dates[0].start_date ? val.dates[0].start_date.replace(/\\-/g, '.'): null}\n                  description={val.description.replace('<p>', '').replace('</p>', '')}\n                />\n      })\n      this.setState({cards: cards});\n    });*/\n\n  }\n\n  set = (cards) => {\n    this.setState({cards: cards});\n  }\n\n  componentDidMount() {\n    let list = [];\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://justgonsk.azurewebsites.net/api/Test');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.send();\n\n    xhr.onreadystatechange = function() {\n      if (this.readyState != 4) return;\n\n      // по окончании запроса доступны:\n      // status, statusText\n      // responseText, responseXML (при content-type: text/xml)\n\n      if (this.status != 200) {\n        // обработать ошибку\n        alert( 'ошибка: ' + (this.status ? this.statusText : 'запрос не удался') );\n        return;\n      }\n      list = JSON.parse(this.responseText);\n      console.log(list);\n      let i = 0;\n      let cards = list.results.map((val) => {\n        return  <Card\n                  key={i++}\n                  src={val.images[0].image}\n                  title={val.title.toUpperCase()}\n                  date={val.dates[0].start_date ? val.dates[0].start_date.replace(/\\-/g, '.'): null}\n                  description={val.description.replace('<p>', '').replace('</p>', '')}\n                />\n      })\n      List.set.call(List, cards);\n  // получить результат из this.responseText или this.responseXML\n}\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n      { this.state.cards || <Card />}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Map extends Component {\n\n  render() {\n    return (\n      <div>\n        Здесь будет карта\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport List from \"./List\";\nimport Map from \"./Map\";\n\nexport default class Menu extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      visible: props.visible,\n      className: 'menu__background'\n    };\n\n  }\n\n  click = e => {\n\n    e.target.parentNode.parentNode.parentNode.classList.remove('visible');\n    this.props.changeParentState();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n\n    if(nextProps.visible !== this.state.visible) {\n      this.setState({visible: nextProps.visible});\n      if(this.state.visible) {\n        this.setState({className: 'menu__background visible'});\n      }\n      else {\n        this.setState({className: 'menu__background'});\n      }\n\n\n      return true;\n    }\n    else return false;\n  }\n\n\n\n  render() {\n\n    return (\n      <Router>\n      <div className={this.state.className} onClick={this.click}>\n        <div className='nav paper'>\n            <ul className='nav__list'>\n              <li onClick={this.click}>\n                <Link className=\"nav__link\" to=\"/\">Список</Link>\n              </li>\n              <li onClick={this.click}>\n                <Link className=\"nav__link\" to=\"/map/\">Карта</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/\" exact component={List} />\n            <Route path=\"/map\" component={Map} />\n          </Switch>\n        </div>\n\n      </Router>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\n\nexport default class Gamburger extends Component {\n\n  render() {\n    return (\n      <img src=\"/hamburger.png\" width='80' height='80' className=\"hamburger\" alt=\"Меню\" onClick={this.props.onChange}/>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Gamburger from './Gamburger';\n\nexport default class Header extends Component {\n\n  render() {\n    return (\n      <div className=\"header paper\">\n        <div className=\"center\">\n          <Gamburger onChange={this.props.onChange}/>\n          <div className=\"logo\">JG</div>\n          <div className=\"medium\">Регистрация</div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n\n  render() {\n    return (\n      <div className=\"footer paper\">\n        <div className=\"center\">\n          <div className=\"small\">Наша почта:\n          <a href=\"mailto:email@mail.mal\" className=\"mail\">email@mail.mal</a>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isMenuVisible: true\n    }\n  }\n\n  stateToggle = () => {\n    this.setState({isMenuVisible: !this.state.isMenuVisible});\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"page\">\n      <Header onChange={this.stateToggle}/>\n      <Menu visible={this.state.isMenuVisible} changeParentState={this.stateToggle}/>\n      <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}