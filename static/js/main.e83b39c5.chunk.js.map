{"version":3,"sources":["components/Card.js","components/List.js","components/Map.js","components/Menu.js","components/Gamburger.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Component","List","_this","state","list","fetch","method","mode","then","response","json","val","results","console","log","i","cards","map","key","src","images","image","width","alt","title","toUpperCase","dates","start_date","description","replace","setState","num","date","day","addZero","getDate","month","getMonth","year","getFullYear","concat","Card_Card","Map","Menu","click","e","target","parentNode","classList","remove","changeParentState","visible","nextProps","nextState","react_router_dom","onClick","to","react_router","path","exact","component","Gamburger","height","onChange","Header","Gamburger_Gamburger","Footer","href","App","stateToggle","isMenuVisible","Header_Header","Menu_Menu","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e83b39c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Card extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"card paper\">\n        <div className=\"big\">Загрузка...</div>\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card';\n\nexport default class List extends Component {\n  constructor() {\n    super();\n    this.state = {};\n    let list = [];\n    const options = {\n        method: 'GET',\n      //  headers: new Headers({'Content-Type': 'application/json'}),\n        mode: 'no-cors'\n      };\n    fetch('https://kudago.com/public-api/v1.4/events/?location=nsk&expand=dates&fields=dates,title,short_title,place,description,categories,images&actual_since=1546300800&is_free=true', options).then(response => {\n      return response.json();\n    }).then(val => {\n      list = val.results;\n      console.log(list);\n      let i = 0;\n      let cards = list.map((val) => {\n\n        return (\n\n          <div className=\"card paper\" key={i++}>\n            <img src={val.images[0].image} width='200' alt=\"\" className='image'/>\n            <div className=\"big\">{val.title.toUpperCase()}</div>\n            <div className=\"small\">{val.dates[0].start_date}</div>\n            <div className=\"medium\">{val.description.replace('<p>', '').replace('</p>', '')}</div>\n          </div>\n        )\n      })\n      this.setState({cards: cards});\n    });\n\n  }\n\n  addZero(num) {\n    return num < 10 ? '0' + num : num;\n  }\n\n\n  formatDate(date) {\n    let day = this.addZero(date.getDate());\n    let month = this.addZero(date.getMonth()+1);\n    let year = date.getFullYear();\n    return `${day}.${month}.${year}`;\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n      { this.state.cards || <Card />}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Map extends Component {\n\n  render() {\n    return (\n      <div>\n        Здесь будет карта\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport List from \"./List\";\nimport Map from \"./Map\";\n\nexport default class Menu extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      visible: props.visible,\n      className: 'menu__background'\n    };\n\n  }\n\n  click = e => {\n\n    e.target.parentNode.parentNode.parentNode.classList.remove('visible');\n    this.props.changeParentState();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n\n    if(nextProps.visible !== this.state.visible) {\n      this.setState({visible: nextProps.visible});\n      if(this.state.visible) {\n        this.setState({className: 'menu__background visible'});\n      }\n      else {\n        this.setState({className: 'menu__background'});\n      }\n\n\n      return true;\n    }\n    else return false;\n  }\n\n\n\n  render() {\n\n    return (\n      <Router>\n      <div className={this.state.className} onClick={this.click}>\n        <div className='nav paper'>\n            <ul className='nav__list'>\n              <li onClick={this.click}>\n                <Link className=\"nav__link\" to=\"/\">Список</Link>\n              </li>\n              <li onClick={this.click}>\n                <Link className=\"nav__link\" to=\"/map/\">Карта</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/\" exact component={List} />\n            <Route path=\"/map\" component={Map} />\n          </Switch>\n        </div>\n\n      </Router>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\n\nexport default class Gamburger extends Component {\n\n  render() {\n    return (\n      <img src=\"/hamburger.png\" width='80' height='80' className=\"hamburger\" alt=\"Меню\" onClick={this.props.onChange}/>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Gamburger from './Gamburger';\n\nexport default class Header extends Component {\n\n  render() {\n    return (\n      <div className=\"header paper\">\n        <div className=\"center\">\n          <Gamburger onChange={this.props.onChange}/>\n          <div className=\"logo\">JG</div>\n          <div className=\"medium\">Регистрация</div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n\n  render() {\n    return (\n      <div className=\"footer paper\">\n        <div className=\"center\">\n          <div className=\"small\">Наша почта:\n          <a href=\"mailto:email@mail.mal\" className=\"mail\">email@mail.mal</a>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isMenuVisible: true\n    }\n  }\n\n  stateToggle = () => {\n    this.setState({isMenuVisible: !this.state.isMenuVisible});\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"page\">\n      <Header onChange={this.stateToggle}/>\n      <Menu visible={this.state.isMenuVisible} changeParentState={this.stateToggle}/>\n      <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}